[Mysql]常用的笔记
一、创建表之后生成的一些文件的作用：
	FRM文件：存放表结构
	myd文件：存放数据
	myi文件：存放索引
二、Mysql中一些常用的语句
	创建单值索引的语句：
		create index 索引的名称 on 表名(字段名)
		alter table 表名 add index 索引的名称 (字段名)
	删除索引的语句：
		drop index 索引的名称 on 表名
		alter table 表名 drop index 索引的名称
	查看某个表上的索引：
		show index from 表名
		show keys from 表名
三、Mysql的小笔记
	Sql语句的书写的顺序：
		SELECT DISTINCT <SELECT_LIST>
		FROM <LFET_TABLE> <JOIN_TYPE> JOIN
		RIGHT <RIGHT_TABLE> ON <JOIN_CONDITION>
		WHERE <WHERE_CONDITION>
		GROUP BY <GROUP_LIST>
		HAVING <HAVING_CONDITION>
		ORDER BY <ORDER_BY_CONDITION>
		LIMIT <LIMIT_NUMBER>

		where和having的区别：
			where字句的作用是在对结果进行分组前过滤数据
			having字句的作用是筛选满足条件的组，即在分组之后进行数据的过滤，使用having条件过滤的是特定的组
	Sql语句机器读取的顺序：
		FROM <LEFT_TABLE> ON <JOIN_CONDITION>
		<JOIN_TYPE> JOIN <RIGHT_TABLE>
		WHERE <WHERE_CONDITION>
		GROUP BY <GROUP_BY_LIST>
		HAVING <HAVING_CONDITION>
		SELECT DISTINCT <SELECT_LIST>
		ORDER BY <ORDER_BY_CONDITION>
		LIMIT <LIMIT_NUMBER>
	Group By字句对SELECT指定的字段的限制：
		在SELECT指定的字段要么就包含在Group By语句的后面作为分组的依据；要么就放在Sql语句支持的聚合函数中。但是Myql对Group By语句进行了改进，它可以存在不满足上述规则的语句的存在进行查询，此时Mysql会默认在查询语句的后面加上limit 1操作，这样返回的只有一条数据，此时返回的数据有可能跟需要的数据不符。
	各种各样的Join语句：
		LEFT JOIN：
			SELECT * FROM A LEFT JOIN B ON A.ID = B.ID [查出的结果是A的独有+A和B的共有]
		RIGHT JOIN：
			SELECT * FROM A RIGHT JOIN B ON A.ID = B.ID [查出的结果是B的独有+A和B的共有]
		INNER JOIN
			SELECT * FROM A INNER JOIN B ON A.ID = B.ID [查出的结果是A和B的共有]
		单独取出A：
			SELECT * FROM A LEFT JOIN B ON A.ID = B.ID WHERE B.ID IS NULL [取出A的独有]
		单独取出B：
			SELECT * FROM A RIGHT JOIN B ON A.ID = B.ID WHERE A.ID IS NULL [取出B的独有]
		取出所有数据并且去重：
			SELECT * FROM A LEFT JON B ON A.ID = B.ID 
			UNION
			SELECT * FROM A RIGHT JOIN B ON A.ID = B.ID
		取出除A和B共有的数据：
			SELECT * FROM A LEFT JOIN B ON A.ID = B.ID WHERE B.ID IS NULL
			UNION
			SELECT * FROM A RIGHT JOIN B ON A.ID = B.ID WHERE A.ID IS NULL
	索引：
		索引[Index]是帮助Mysql高效获取的数据结构[索引本身是一种数据结构]
		优势：
			提高数据的检索效率，降低IO
			本身对数据进行了排序，降低数据的排序成本，降低CPU消耗
		劣势：
			索引的构建也需要占用空间
			会降低数据表更新的速度
			需要花时间去进行数据库索引的优化
	使用Explain查看Sql的执行计划：
四、MYSQL的一些常用命令和一些概念
	创建数据库
		CREATE DATABASE + 数据库名 + DEFAULT CHARACTER SET UTF8
	展示有哪些数据库
		SHOW DATABASES
	选择数据库
		USER + 数据库名
	删除数据库
		DROP DATABASE + 数据库名
	存储引擎：决定了表的类型，即如何存储和和索引数据、是否支持事务等。
	查看数据库支持的引擎
		SHOW ENGINES\G
		其中\G用于纵向的展示结果数据
	查询默认的存储引擎
		SHOW VARIABLES LIKE "%storage_engine%"
	数据类型：决定存储数据的类型。MYSQL数据库管理系统提供了整形类型、浮点类型、定点数类型和位类型、日期和时间类型、字符串类型。
	整数类型
		MYSQL数据库除了支持所有整数类型(SMALLINT和INT)外，还进行了相应的扩展，扩展后增加了TINYINT、MEDIUMINT和BIGINT这三个整数类型。
		TINYINT：1个字节
		SMALLINT：2个字节
		MEDIUMINT：3个字节
		INT和INTEGER：4个字节
		BIGINT：5个字节
	浮点数类型、定点数类型和位类型
		FLOAT：4个字节
		DOUBLE：8个字节
		普通情况下可以选择FLOAT或者DOUBLE，当需要精确到小数点10为以上，就需要选择DOUBLE类型
		DEC(M,D)和DECIMAL(M,D)：M+2个字节
		BIT(M)：M个字节
	日期和时间类型
		DATE：4个字节
		DATETIME：8个字节
		TIMESTAMP：4个字节
		TIME：3个字节
		YEAR：1个字节
		表示年月日：DATE
		表示年月日时分秒：DATETIME
		如果经常需要插入或者更新为系统当前时间，一般用TIMESTAMP
		表示时分秒：TIME
		年份：YEAR
	字符串类型
		CHAR(M)：M个字节
		VARCHAR(M)：M个字节
		CHAR最大只能装载M个字节，且无论其中的数据能否占据到M个字节，在存储的时候都会占据M个字节；如果是VARCHAR，同样的，它的最大长度也是M个字节，但是它能根据数据的长度的不同占据不同的字节数。
五、表的操作
	创建表
		创建表的语句
			CREATE TABLE 表名 (
				属性名 数据类型，
				属性名 数据类型，
				..
				属性名 数据类型
			)
		查看表结构
			DESCRIBE + 表名：查看表定义
			SHOW CREATE TABLE + 表名：查看表的详细定义
		删除表
			DROP TABLE + 表名
		修改表
			修改表名：
				ALTER TABLE + 旧表名 + RENAME [TO] + 新表名
			增加表的字段：
				在表的最后一个位置增加字段
					ALTER TABLE + 表名 +  ADD + 属性名 + 属性类型
				在表的第一个位置增加字段[使用FIRST关键字]
					ALTER TABLE + 表名 + ADD + 属性名 + 属性类型 + FIRST
				在表的指定字段之后增加
					ALTER TABLE + 表名 + ADD + 属性名 + 属性类型 + AFTER + 属性名
			删除字段：
				ALTER TABLE + 表名 + DROP + 属性名
			修改字段：
				修改字段的数据类型
					ALTER TABLE + 表名 + MODIFY + 属性名 + 属性类型
				修改字段的名字
					ALTER TABLE + 表名 + CHANGE + 旧属性名 + 新属性名 + 旧属性类型
				同时修改字段的名字和属性
					ALTER TABEL + 表名 + CHANGE + 旧属性名 + 新属性名 + 新属性类型
				修改字段的顺序
					ALTER TABLE + 表名 + MODIFY + 属性名1 + 数据类型 + BEFORE|AFTER + 属性名2
		操作表的约束
			对于已经创建好的表，虽然字段的数据类型决定了所能存储的数据类型，但是表中所存储的数据是否合法并没有进行检查
			MYSQL所支持的完整性约束：
				NOT NULL：约束字段的值不能为空
					语法形式：
						CREATE TABLE + 表名 (
							属性名 属性类型 NOT NULL，
							...
						)
				DEFAULT：设置字段的默认值
					语法形式：
						CREATE TABLE + 表名 (
							属性名 属性类型 DEFAULT 默认值，
							...
						)
				UNIQUE KEY(UK)：约束字段的值唯一
					语法形式：
						CREATE TABLE + 表名 (
							属性名 属性类型 UNIQUE，
							...
						)
				PRIMARY KEY(PK)：约束字段为主键
					单字段主键语法：
						CREATE TABLE + 表名 (
							属性名 属性类型 PRIMARY KEY，
							...
						)
					多字段主键语法：
						CREATE TABLE + 表名 (
							属性名 属性类型，
							...
							PRIMARY KEY(属性名1, 属性名2...)
						)
				AUTO_INCREMENT：约束字段的值自增[MYSQL唯一扩展的约束]
					语法形式：
						CREATE TABLE + 表名 (
							属性名 属性类型 AUTO_INCREMEMT
						)
				FOREIGN KEY(FK)：约束字段为表的外键
					在具体设置FK约束时，设置FK约束的字段必须依赖于数据库中已经存在的父表的主键，同时外键可以设置为NULL
					语法形式：
						CREATE TABLE + 表名(
							属性名 属性类型，
							属性名 属性类型，
							...
							FOREIGN KET(属性名1) REFERENCES 另一个表名(属性名2)
						)
六、索引的操作
	数据库对象索引其实与书的目录非常相似，主要是为了提高从表中检索数据的速度。由于数据存储在数据库表中，所以索引是创建在数据库表对象上的，由表中的一个字段或多个字段生成的键组成，这些键存储在数据结构(B-树或哈希表)中，INNODB和MYISAM存储引擎支持BTREE类型的索引，MEMORY存储引擎支持HASH索引，默认使用的是BTREE索引。
	MSQYL支持6种索引
		普通索引：就是在创建索引时，不附加任何限制条件(唯一、非空等限制)，该类型的索引可以创建在任何数据类型的字段上。
			创建表时创建索引：
				CREATE TABLE + 表名 (
					属性名 属性类型，
					属性名 属性类型，
					...
					INDEX|KEY 索引名(属性名1 ASC|DESC)
				)
			在已经存在的表上创建普通索引：
				CREATE INDEX + 索引名 + ON 表名(属性名 ASC|DESC)
			通过ALTER TABLE的SQL语句创建普通索引：
				ALTER TABLE + 表名 + ADD INDEX|KEY + 索引名(属性名 ASC|DESC)
		唯一索引：就是在创建索引的时，限制索引的值必须是唯一的。在MYSQL中，根据创建索引方式，可以分为自动索引和手动索引两种。所谓自动索引，是指在数据库表里设置完整性约束时，该表会被系统自动的创建索引；所谓手动索引，是指手动在表上创建索引。
			创建表时创建唯一索引：
				CREATE TABLE + 表名 (
					属性名 属性类型，
					属性名 属性类型，
					...
					UNIQUE INDEX|KEY 索引名(属性名1 ASC|DESC)
				)
			在已经存在的表上创建唯一索引：
				CREATE UNIQUE INDEX 索引名 ON 表名(属性名 ASC|DESC)
			通过ALTER TABLE的SQL语句创建唯一索引：
				ALTER TABLE 表名 ADD UNIQUE INDEX|KEY 索引名(属性名 ASC|DESC)
		全文索引：全文索引主要关联在数据类型为CHAR、VARCHAR和TEXT的字段上，以便能够更加快速地查询数据量较大的字符串类型的字段。
			创建表时创建全文索引：
				CREATE TABLE + 表名 (
					属性名 属性类型，
					属性名 属性类型，
					...
					FULLTEXT INDEX|KEY 索引名(属性名1 ASC|DESC)
				)
			在已经存在的表上创建全文索引：
				CREATE FULLTEXT INDEX 索引名 ON 表名(属性名 ASC|DESC)
			通过ALTER TABLE的SQL语句创建全文索引：
				ALTER TABLE 表名 ADD FULLTEXT INDEX|KET 索引名(属性名 ASC|DESC)
		单列索引
		多列索引：指在创建索引时，所关联的字段不是一个字段，而是多个字段，虽然可以通过所关联的字段进行查询，但是只有查询条件中使用了关联字段中的第一个字段，多列索引才会被使用。
			创建表时创建多值索引：
				CREATE TABLE + 表名 (
					属性名 属性类型，
					属性名 属性类型，
					...
					INDEX|KEY 索引名(属性名1 ASC|DESC, 属性名2 ASC|DESC...)
				)
			在已经存在的表上创建多列索引：
				CREATE INDEX 索引名 ON 表名(属性名1 ASC|DESC, 属性名2 ASC|DESC...)
			通过ALTER TABLE的SQL语句创建多列索引：
				ALTER TABLE 表名 ADD INDEX 索引名(属性名1 ASC|DESC, 属性名2 ASC|DESC...)
		空间索引
	以下情况适合创建索引：
		经常被查询的字段，即在WHRER字句中出现的字段
		在分组的字段，即在GROUP BY出现的字段
		存在依赖关系的子表和父表之间的联合查询，即主键或外键字段
		设置唯一完整性约束的字段
	以下情况不适合创建索引：
		在查询中很少被使用的字段
		拥有很多重复值的字段
	删除索引
		语法形式：
			DROP INDEX 索引名 ON 表名
	查看索引
		语法形式：
			SHOW INDEX FOMR 表名
七、视图的操作
	为了提高复杂SQL语句的复用性和表操作的安全性，MYSQL数据库管理系统提供了视图特性。所谓视图，本质上是一种虚表，其内容与真实的表相似，包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值形式存在。行和列数据来自定义视图的查询所引用基本表，并且在具体引用视图时动态生成。
	视图的特点
		视图的列可以来自不同的表，是表的抽象和在逻辑意义上建立的新关系
		视图是由基本表产生的虚表
		视图的建立和删除不影响基本表
		视图内容的更新直接影响基本表
		当视图来自多个基本表时，不允许添加和删除数据
	创建视图
		语法形式：
			CREATE VIEW 视图名 AS 查询语句
	使用视图的方式
		SELECT * FROM 视图名
	创建各种视图
		由于视图的功能实际上就是封装查询语句，那么是不是任何形式的查询语句都可以封装在视图里？
		封装实现查询常量语句的视图，即常量视图
			CREATE VIEW 视图名 AS SELECT 常量
		封装使用聚合函数(SUM, MIN, MAX, COUNT等)查询语句的视图
			CREATE VIEW 视图名 AS SELECT COUNT(列名) FROM 表名
		封装实现排序功能(ORDER BY)查询语句的视图
			CREATE VIEW 视图名 AS SELECT 列名 FROM 表名 ORDER BY 列名
		封装实现了表内连接查询语句的视图
			CREATE VIEW 视图名 AS SELECT 列名 FROM 表名1, 表名2 WHERE 条件
		封装实现了表外链接查询语句的视图
			CREATE VIEW 视图名 AS SELECT 列名 FROM 表名1 LEFT|RIGHT JOIN 表名2 ON 条件
		封装子查询相关查询语句的视图
			CREATE VIEW 视图名 AS SELECT 列名 FROM 表名1 WHERE 表名1.字段 = (SELECT 字段 FROM 表名2)
		封装实现联合查询(UNION UNION ALL)查询语句的视图
			CREATE VIEW 视图名 AS SELECT 列名 FROM 表名1 UNION|UNION ALL SELECT 列名 FROM 表名2
	查看视图
		SHOW TABLES：不仅可以查看表的名字，还可以显示视图的名字
		SHOW TABLE STATUS：不仅会显示表的详细信息，同时也会显示视图的详细信息
		SHOW CREATE VIEW 视图名：查看视图定义信息
		DESCRIBE|DESC：查看视图设计信息
	删除视图
		语法形式：
			DROP VIEW 视图名1, 视图名2...
	修改视图
		对于已经创建好的视图，当使用一段时间之后，就会需要进行一些结构上的修改，即视图的修改操作。对于已经创建好的表，尤其是已经有大量数据的表，通过先删除，然后再按照新的表定义重建表的方式来修改表，需要做许多额外的工作，但是视图则没有这么多麻烦，视图相当于虚表，并没有存储数据，所以完全可以通过删除之后重建的方式。
		鉴于删除重建视图比较麻烦，MYSQL提供了可以实现替换的创建视图语法，重建视图的语法形式：
			CREATE OR REPLACE VIEW 视图名 AS 查询语句
			ALTER VIEW 视图名 AS 查询语句
	利用视图操作基本表
		检索数据：通过视图查询数据与通过表查询数据完全相同，只不过通过视图查询比表更安全、更简单、实用。
			语法形式：SELECT * FRPM 视图名
		利用视图操作基本表数据：由于视图中的数据就是虚表，因此对视图数据进行的更新操作，实际上是对其基本表数据进行更新操作，在具体更新视图数据时，需要注意以下两点：
			对视图数据进行添加、更新和删除操作直接影响基本表
			视图来自多个基本表时，不允许添加和删除数据
八、触发器的操作
	触发器(TRIGGER)是MYSQL的数据库对象之一，该对象与编程语言中的函数非常类似，都需要声明和执行等。但是触发器的执行不是由程序调用，也不是由手工启动，而是由事件来触发、激活从而实现执行。MYSQL软件在触发如下语句时，会自动执行所设置的操作：
	DELETE语句
	UPDATE语句
	INSERT语句
	创建触发器[只有一条执行语句的触发器]
		CREATE TRIGGER 触发器名字 AFTER|BEFORE 触发器事件 ON 表名 FOR EACH ROW 触发器执行的语句
		触发器名字：除了不能重复之外没有什么其他的限制
		触发器事件：指明触发此触发器的语句，如DELETE UPDATE INSERT等语句
		触发器执行的语句：当触发器被触发的时候执行的语句
		例子：
			CREATE TRIGGER tri_dept BEFORE INSERT ON tbl_dept FOR EACH ROW INSERT INTO tbl_diary(..) VALUES(..)
			解释：上面的触发器会在向tbl_dept表中插入数据之前向tbl_diary中插入一条语句
			注：如果使用批量语句向tbl_dept中插入语句，那么tbl_diary表中也会向其中维护对应条数的语句
	创建触发器[多条执行语句的触发器]
		CREATE TRIGGER 触发器名字 AFTER|BEFORE 触发器事件 ON 表名 FOR EACH ROW
			BRGIN
				触发器执行的语句
			END
		在BEGIN和END两个关键字之间加入所要执行的多个执行语句的内容，执行语句之间使用分号进行分割。但是在MSYSQL语言中，一般情况使用";"表示语句的结束符号，但是在创建触发器的时候需要使用";"表示语句的结束，为了解决该问题，可以使用DELIMITER语句，例如DELIMITER $$ 将结束符设置为 "$$" 但是切记 一般使用完触发器之后将语句的结束符进行恢复。
	查看触发器
		SHOW TRIGGERS
		在创建触发器之前一般会查看一下是否存在这个触发器以及是否存在相同的触发器的相关事件
		在MYSQL软件中，在系统数据库information_schema中存在一个存储所有触发器信息的系统表triggers，因此查看该表也可以查看触发器的详细信息。
		USER INFORMATION_SCHEMA
		SELECT * FROM TRIGGERS
	删除触发器
		DROP TRIGGER 触发器名
九、数据的操作
	插入数据记录
		INSERT INTO 表名(字段名1...) VALUES(值1...)
		INSERT INTO 表名 VALUES(值1...)
		INSERT INTO 表名(字段名1...) VALUES(值1...),(值1...),(值1)...
		INSERT INTO 表名 VALUES(值1...),(值1...)
		INSERT INTO 表名1(字段名1...) SELECT (字段名1...) FROM 表名2 WHERE...
	更新数据记录
		UPDATE 表名 SET 字段名1=值1, 字段名2=值2 WHERE CONDITION
	删除数据记录
		DELETE FROM 表名 WHERE CONDITION
十、单表数据查询
	简单数据记录查询的SQL语句可以通过如下集中方式进行使用：
		简单数据查询
			SELECT * FROM 表名
			SELECT 字段名1, 字段名2... FROM 表名
		避免重复数据查询
			SELECT DISTINCT 字段名1, 字段名2... FROM 表名
		实现四则运算数据查询
			在MYSQL软件中执行简单数据查询的时候，有时会需要实现数学四则运算，MYSQL支持的四则运算符：
				+ ：加
				- ：减
				* ：乘
				/ ：除
				% ：取余
			SELECT 字段名1 * 12 [AS 别名] FROM 表名
		设置显示格式数据查询
			MYSQL软件中提供函数CONTACT()来链接字符串，从而实现设置数据的格式
			SELECT CONTACT(字段名1, '其他的字符', 字段名2) [AS 别名] FROM 表名
	条件数据记录查询
		SELECT 字段名1, 字段名2... FROM 表名 WHERE CONDITION
		上述语句中可以通过参数CONDITION对数据进行条件查询，条件查询可以包含如下功能：
			带关系运算符和逻辑运算符的条件数据查询
				在MYSQL软件中，可以通过关系运算符和逻辑运算符来编写"条件表达式"，MYSQL支持的关系运算符和逻辑运算符：
				关系运算符
				> ：大于
				< ：小于
				= ：等于
				!=(<>) ：不等于
				>= ：大于等于
				<= : 小于等于
				逻辑运算符
				AND(&&) ：逻辑与
				OR(||) ：逻辑或
				XOR ：逻辑异或
				NOT(!) ：逻辑非
				注：关键字、各种标识符和数据记录都不区分大小写
			带BETWEEN AND 关键字的条件数据查询
				SELECT 字段1, 字段2... FROM 表名 BETWEEN 值1 AND 值2
				BETWEEN和AND来设置字段的取值范围，如果字段的值在所指定的范围内，则满足条件，否则不满足
				如果要查询不在范围内的数据，只需要在BETWEEN AND 之前加上NOT
			带IS NULL 关键字的条件数据查询
				用来判断字段的数值是否为空的条件查询
				SELECT 字段1, 字段2... FROM 表名 WHERE 字段 IS NULL
				关键字IS NULL来判断字段的值是否为空，如果为NULL，则满足条件，否则不满足；在具体实现该应用时，一定要注意空值与空字符串和0的区别
				如果要查询不是空值的字段，有两种方式，一是将IS NULL改为IS NOT NULL，另一个就是在判断是否空值的字段前面加上NOT
			带IN 关键字的条件数据查询
				用来实现判断字段的数值是否在指定集合中的条件查询
				SELECT 字段1, 字段2... FROM 表名 WHERE 字段 IN (值1, 值2, 值3...)
				通过关键字IN来判断字段的值是否在集合(值1, 值2, 值3)中，如果字段的值在集合中，则满足查询条件，否则不满足
				如果要查询不满足IN条件的集合，有两种方式，一是在IN前面加上NOT，另一个就是在判断是否在集合中的字段的前面加上NOT
				注意点：在具体使用关键字IN时，查询的集合中如果存在NULL，则不会影响查询；如果使用关键字NOT IN，查询的集合中如果存在NULL，则不会有任何的查询结果。
			带LIKE 关键字的条件数据查询
				用来实现判断字段的值是否与指定的值想匹配
				SELECT 字段1, 字段2... FROM 表名 WHERE 字段 LIKE 值
				对于字符串在MYSQL软件，必须加上单引号或者双引号，由于关键字LIKE可以实现模糊查询，所以该关键字后面的字符串参数除了可以是一个完整的字符串之外，还可以包含通配符。LIKE关键字支持的通配符如下：
					"_"通配符，该通配符值能匹配单个字符
					"%"通配符，该通配符值可以匹配任意长度的字符串
				如果向查询不匹配此LIKE条件的结果，可以在字段的前面加上NOT标识符；同样的，MYSQL也支持NOT LIKE关键字实现此功能。
		排序数据记录查询
			MYSQL提供了关键字ORDER BY来设置查询结果的顺序
			SELECT 字段1, 字段2... FROM 表名 WHERE CONDITION ORDER BY 字段1 [ASC|DESC], 字段2 [ASC|DESC]...
			默认情况下，按照ASC(升序)进行排序
			注意：在MYSQL软件中，如果字段的值为(NULL 空值)，在该值为最小值，因此在降序中显示在最后一行，在升序排序中位于第一行
			MYSQL同时支持单值排序和多值排序，单值排序就是普通的排序，如果是多值排序，会先按照第一个字段进行排序，如果遇到值相同的，则按照第二个字段进行排序，以此类推。
		限制数据记录查询数量
			MYSQL提供了关键字LIMIT用于限制数据查询结果
			SELECT 字段1, 字段2... FROM 表名 WHERE CONDITION LIMIT OFFSET_START, ROW_COUNT
			参数OFFSET_START指定数据记录的起始偏移量，参数ROW_COUNT表示显示的行数；如果不指定初始位置，默认值是0，表示从第一条记录开始显示
		统计函数和分组记录查询
			在MYSQL软件中，很多情况下都需要进行一些统计汇总操作，这时候就需要用到该软件所支持的统计函数，它们分别是：
				COUNT() ：统计表中记录的条数
					统计函数COUNT()用来实现统计数据记录条数
					COUNT(*) ：该种方式可以实现对表中记录进行统计，不管表字段中包含的是NULL值还是非NULL值
					COUNT(字段名) ：该种方式可以实现对指定字段的记录进行统计，在具体统计时将忽略NULL值
				AVG() ：计算字段值的平均值
					统计函数AVG()首先用来实现统计计算特定字段值之和，然后求得该字段的平均值
					AVG(字段名) ：该种方式可以实现对指定字段的平均值进行计算，在具体统计时将忽略NULL值
				SUM() ：计算字段值的总和
					统计函数SUM()用来实现统计数据计算求和
					SUM(字段名) ：该种方式可以实现计算指定字段值之和，在具体统计时将忽略NULL值
				MAX() ：查询字段值的最大值
				MIN() ：查询字段值的最小值
					统计函数MAX()和MIN()可以用来实现统计数据计算求最大值和最小值
					MAX(字段名) ：该种方式可以实现计算指定字段值的最大值，在具体统计时将忽略NULL值
					MIN(字段名) ：该种方式可以实现计算指定字段值的最小值，在具体统计时将忽略NULL值
			关于统计函数的注意点：对于MYSQL软件所支持的统计函数，如果所操作的表中没有任何数据记录，则COUNT()函数返回数据0，而其他函数则返回NULL
			分组数据查询
				MYSQL软件中分组通过SQL语句GROUP BY来实现
				SELECT function() FROM 表名 WHERE CONDITION GROUP BY 字段名
				注意：在具体进行分组查询时，分组所依据的字段上的值一定要有重复值，否则将没有任何的实际意义。而且如果只是单独的使用GROUP BY语句，默认查询出的每个分组中随机的一条记录，具有很大的不确定性。
				如果向显示每个分组中的字段，可以通过GROUP_CONCAT()来实现，该函数可以实现显示每个分组中的指定字段值。
				SELECT GROUP_CONCAT(字段值) FROM 表名 WHERE CONDITION GROUP BY 字段名
				在MYSQL软件中使用关键字GROUP BY时，其字句除了可以是一个字段外，还可以是多个字段，即可以按多个字段进行分组
				SELECT GROUP_CONCAT(字段值) FROM 表名 WHERE CONDITION GROUP BY 字段名1, 字段名2...
				在上述语句中，首先会按照字段1进行分组，然后针对每组字段按照字段二进行分组，以此类推
				在MYSQL软件中如果想实现对分组进行条件限制，决不能通过关键字WHERE来实现，因为该关键字主要是用来实现条件限制数据记录，为了解决上述问题，MYSQL专门提供了关键字HAVIING来实现条件限制分组数据记录。
				SELECT function(字段值) FROM 表名 WHERE CONDITION GROUP BY 字段1, 字段2... HAVING CONDITION
十一、多表数据记录查询
	关系数据库
		并：把具有相同字段数目和字段类型的表合并到一起。并操作之后的新表的列的数目=进行并操作之前的列的数目；并操作之后的记录的数目=两表的记录数目之和-重复的记录
		笛卡尔积：没有连接条件表关系返回的结果。笛卡尔积操作之后的新表的列的数目=两个表的列的数目之和；笛卡尔积操作之后的记录的数目=两表的记录数相乘
	内连接查询
		SELECT 字段1, 字段2... FROM 表名1 INNER JOIN 表名2 [INNER JOIN 表名...] ON JOIN CONDITION
		自连接：表与自身进行连接
		等值链接：就是在关键字ON后的匹配条件中通过等于关系运算符(=)来实现等值条件
		不等链接：就是在关键字ON后的匹配条件中通过除了等于关系运算符来实现不等条件之外，可以使用的关系运算符包含">"、"<"、">="、"<="、"!="等运算符号。
	外链接查询
		在MYSQL软件中外连接查询会返回操作表中至少一个表的所有数据
		SELECT 字段1, 字段2... FROM 表名1 LEFT|RIGHT|FULL JOIN IN 表名2 ON JOIN CONDITION
		LEFT JOIN：新关系中执行匹配条件时，以关键字LEFT JOIN左边的表为参考表
		RIGHT JOIN：新关系中执行匹配条件时，以关键字RIGHT JOIN右边的表为参考表
	合并查询数据记录
		SELECT 字段1, 字段2... FROM 表名1
		UNION | UNION ALL
		SELECT 字段1, 字段2... FROM 表名2
		UNION | UNION ALL
		SELECT 字段1, 字段2... FROM 表名3
		UNION和UNION ALL的区别就在于UNION会去重，而UNION ALL不会去重。
	子查询
		MYSQL软件虽然可以通过链接查询实现多表查询数据记录，但是却不建议使用，因为链接查询的性能很差。
		因此首先会通过统计函数查看所操作表笛卡尔积的数据记录数，然后才会进行多表查询
			通过统计函数COUNT()查询所关联表笛卡尔积之后的数据记录
			如果查询到的数据记录数MYSQL软件可以接受，然后才进行多表连接查询，否则就需要用其他的实现
		所谓子查询，指在一个查询之中嵌套了其他的若干查询，即在一个SELECT查询语句的WHERE或FROM字句中包含另一个SELECT语句。
			WHERE字句中的子查询：该位置处的子查询一般返回单行单列、多行单列、单行多列数据记录；
			FROM子句中的子查询：该位置处的子查询一般返回多行多列数据记录，可以当作一张临时表。
			当子查询返回的结果为单行单列数据记录时，该子查询语句一般在主查询语句的WHERE子句里，通常会包含比较运算符。
			当子查询的返回结果为多行单列数据记录时，该子查询语句一般会在主查询的WHERE子句里，通常会包含IN、ANY、ALL、EXISTS等关键字。
				带IN：一般用于表示主查询的条件是子查询中的结果
				带ANY：用于表示主查询的条件是满足子查询返回结果中任意一条数据记录
					=ANY：同IN
					>ANY(>=ANY)：比子查询中返回数据记录中最小的还要大于(大于等于)数据记录
					<ANY(<=ANY)：比子查询中返回数据记录中最大的还要小于(小于等于)数据记录
				带ALL：用于表示主查询的条件满足子查询返回查询结果中所有数据记录
					>ALL(>=ALL)：比子查询中返回数据记录中最大的还要大于(大于等于)数据记录
					>ALL(<=ALL)：比子查询中返回数据记录中最大的还要小于(小于等于)数据记录
				带EXISTS：
			当子查询返回结果为多行多列数据记录时，该子查询语句一般会在主查询语句的FROM子句里，被当作一张临时表的方式来处理。
十二、使用MYSQL运算符
	算数运算符：普通的+、-、*、/、%，对于除法而言，当除数为0时，返回的结果为NULL
	比较运算符：>、<、=(<=>)、!=(<>)、>=、<=、BETWEEN AND、IS NULL、IN、LIKE、REGEXP
	逻辑运算符：AND(&&)、OR(||)、NOT(!)、XOR
	位运算符：&、|、~、^、<<、>>
十三、使用MYSQL常用函数
	字符串函数：
		CANCAT(str1, str2...strn)：连接字符串str1, str2...strn为一个完整字符串，如果其中的一个参数为NULL，则返回值为NULKL；同时还有一个CONCAT_WS(SEP, str1, str2...strn)，与CONCAT相比，多了一个SEP参数，该方法不仅将传入的其他参数连接起来，而且会通过分隔符将各个字符串分隔开。如果分隔符为NULL，返回的结果就是NULL；只要分隔符不是NULL，那么将会忽略后面参数中的NULL值
		INSERT(str, x, y, instr)：将字符串str从第x位置开始的，y个字符长的子串替换成instr；REPLCAE(str, substr, newstr)上述函数会将字符串中的子字符串substr使用字符串newstr进行替代
		LOWER(str)：将字符串str中所有字符变为小写，LCASE(str)
		UPPER(str)：将字符串str中所有字符变为大写，UCASE(str)
		LEFT(str, x)：返回字符串str中最左边的x个字符
		RIGHT(str, x)：返回字符串str中最右边的x个字符
		LPAD(str, n, pad)：使用字符串pad对字符串str最左边进行填充，直到长度为n个字符长度
		RPAD(str, n, pad)：使用字符串pad对字符串str最右边进行填充，知道长度为n个字符长度
		LTRIM(str)：去掉字符串str左边的空格
		RTRIM(str)：去掉字符串str右边的空格
		REPEAT(str, x)：返回字符串str重复x此的结果
		STRCMP(str1, str2)：比较字符串str1和str2，如果参数str1大于str2，则返回结果1；如果参数str1小于str2，则返回结果-1；如果两个参数相等，则返回结果0。
		TRIM(str)：去掉字符串str行头和行尾的空格
		SUBSTRING(str, x, y)：返回字符串str中从x位置起y个字符长度的字符串
		LENGTH(str)：获取字符串str的长度(此长度是字节长度，英文占1个字节，中文占2个字节)，CHAR_LENGTH(str)用来获取字符串str的字符数目(即该字符串有多少个字符)
	数值函数：
		ABS(x)：返回数值x的绝对值
		CEIL(x)：返回大于x的最大整数值
		FLOOR(x)：返回小于x的最大整数值
		MOD(x, y)：返回x模y的值
		RAND()：返回0~1内的随机数，RAND(x)函数也可以获取随机数，其中RAND()获取的随机数是完全随机的，但是RAND(x)返回的随机数值是相同的。
		ROUND(x, y)：返回数值x的四舍五入后有y位小数的数值
		TRUNCATE(x, y)：返回数值x截断y位小数的数值
	日期和时间函数：
		CURDATE()：获取当前日期。CURRENT_DATE()
		CURTIME()：获取当前时间。CURRENT_TIME()
		NOW()：获取当前的日期和时间。CURRENT_TIMESTAMP()、LOCALTIME()、SYSDATE()
		UNIX_TIMESTAMP(date)：获取日期date的UNIX时间戳
		FROM_UNIXTIME()：获取UNIX时间戳的日期值
		WEEK(date)：返回日期date为一年中的第几周。WEEKOFYEAR(date)，取值范围是[1-53]。DAYOFWEEK(date)返回日期date是当前星期的星期几，返回值是1~7，返回值1代表星期日，2代表星期一；DAYNAME(date)返回日期和时间中星期的英文名；WEEKDAY(date)返回日期date是当前星期的星期几，返回值是0~6，如果返回值0代表星期一，1代表星期二。
		QUARTER(date)：返回日期date属于第几个季度
		MONTH(date)：返回日期date属于第几个月
		YEAR(date)：返回日期date的年份，取值范围是[1-12]
		HOUR(time)：返回时间time的小时值
		MINUTE(time)：返回时间time的分钟值
		SECOND(time)：返回时间time的秒
		MONTHNAME(time)：返回时间time的月份值，以英文的形式进行显示(如五月代表May)
		DAYOFMONTH(date)：返回日期属于当前月的第几天；DAYOFYEAR(date)返回日期属于今年的第几天
		EXTRACT(type FROM date)：该函数会从日期和时间参数date中获取指定参数类型参数type值，关于type参数的取值可以是YEAR、MONTH、DAY、HOUR、MINUTE和SECOND。
		计算时间和日期的函数
			TO_DAYS(date)：该函数计算日期参数date与默认日期和时间(0000年1月1日)之间间隔的天数
			FROM_DAYS(number)：该函数计算从默认时间和日期(0000年1月1日)开始经历number天后的日期和时间。
			DATEDIFF(date1, date2)：上述函数会返回日期参数date1与date2之间相隔天数。
			ADDDATE(date, n)：该函数计算日期参数date加上n天后的日期
			SUBDATE(date, n)：该函数计算日期参数date减去n天后的日期
			ADDTIME(time, n)：该函数计算时间参数time加上n秒后的时间
			SUBTIME(time, n)：该函数计算时间参数time减去n秒后的时间
		系统信息函数
			VERSION()：返回数据库的版本号
			DATABASE()：返回当前数据库名，如果没有使用数据库则返回NULL
			USER()：返回当前用户
		流程函数：
			IF(VALUE, t f)：如果VALUE为真，返回t，否则返回f
			IFNULL(value1, value2)：如果value1不为空则返回value1，否则返回value2
			CASE WHEN value1 THEN result1... ELSE default END：如果value1为真，返回result1，否则返回default
			CASE expr WHEN value1 THEN result1... ELSE default END：如果expr等于value1，返回result1，否则返回default
		特殊功能函数：
			PASSWORD(str)：实现对字符串str进行加密
			FORMAT(x, n)：实现对数字x进行格式化，保留n位小数
			INET_ATON(ip)：实现将IP地址转换成数字
			INET_NTOA(x)：实现将数字转换成IP
十四、存储过程和函数的操作
	创建存储过程和函数
		创建存储过程的语法形式：
			CREATE PROCEDURE procedure_name([procedure_parameter]...)
				[characteristic...] routine_body
			procedure_parameter：[IN|OUT|INOUT] parameter_name type
			characteristic：参数的取值
				LANGUAGE SQL：表示存储过程的routine_body部分由SQL语言的语句组成，为MYSQL软件所有默认语句
				[NOT]DETERMINISTIC：表示存储过程的执行结果是否确定，如果值为DETERMINISTIC，表示执行结果是确定的，即每次执行存储过程的时候，如果输入相同的参数得到相同的输出；如果值为NOT DETERMINISTIC，表示执行结果不确定，即相同的输入可能得到不同的输出，默认是DETERMINISTIC。
				{CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES SQL DATA}：表示使用SQL语句的限制。如果值为CONTAINS SQL表示可以包含SQL语句，但不包含读或写数据的语句；如果值为NO SQL表示不包含SQL语句；如果值为READS SQL DATA表示包含读数据的语句；如果值为MODIFIES SQL DATA表示包含写数据语句。默认是CONTAINS SQL
				SQL SECURITY {DEFINER|INVOKER}：设置谁有权限来执行，如果值为DEFINER，表示只有定义者自己能够执行；如果值为INVOKER表示调用者可以执行。默认值为DEFINER
				COMMENT 'str'：表示注释语句
		创建函数的语法形式：
			CREATE FUNCTION funciton_name([function_parameter]...)
				[characteristic...] routine_body
			function_parameter：parameter_name type
	关于存储过程和函数的表达式
		操作变量
			声明变量：
				DECLARE var_name[,...] type [DEFAULT value]：var_name参数表示所有声明的变量名字；参数type表示所有声明变量的类型；DEFAULT value用来实现设置变量的默认值，如果无该语句默认值为NULL。在具体声明变量时，可以同时定义多个变量。
			赋值变量：
				SET var_name=expr[,...]：var_name参数表示所要赋值变量的名字；参数expr是关于变量的赋值表达式。在为变量赋值时，可以同时为多个变量赋值，各个变量的赋值语句之间用逗号隔开；为变量赋值时，除了上述语法，还可以通过关键字"SELECT ... INTO "语句来实现，其语法形式如下：
				SELECT field_name[,...] INTO var_name[,...] FROM tbl_name WHERE condition
				field_name表示查询的字段名，参数var_name参数表示变量名
				当将查询结果赋值给变量时，该查询语句的返回结果只能是单行。
十五、MySQL事务
	事务概述：
		事务有以下4个特性：
			原子性：事务中的所有操作视为一个原子单元，即对于事务进行的数据修改只能是完全提交或者完全回滚。
			一致性：事务在完成之后，必须使所有的数据从一种一致性变更成为另外一个一致性
			隔离性：一个事务中的操作语句所做的修改必须与其他事务所做的修改相隔离
			持久性：事务完成之后，所在的修改对数据的影响是永久的
		MySQL事务隔离级别：
			SET GLOBAL TRANSACTION ISOLATION LEVEL + 
				READ UNCOMMITED
				READ COMMITED
				REPEATABLE READ
				SERIALIZABLE
